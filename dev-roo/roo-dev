#!/bin/sh

PRG="$0"

while [ -h "$PRG" ]; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`/"$link"
    fi
done
ROO_HOME=`dirname "$PRG"`

# Absolute path
ROO_HOME=`cd "$ROO_HOME" ; pwd`
echo "Resolved ROO_HOME: $ROO_HOME"
ROO_CNF_HOME=`cd "$ROO_HOME/../cnf" ; pwd`
echo "Resolved ROO_CNF_HOME: $ROO_CNF_HOME"
ROO_HOME_PARENT=`cd "$ROO_HOME/.." ; pwd`
echo "Resolved ROO_HOME_PARENT: $ROO_HOME_PARENT"

# Remove osgi cache
rm -rf "$ROO_HOME"/generated/osgi

mkdir -p "$ROO_HOME"/generated/osgi/bin
mkdir -p "$ROO_HOME"/generated/osgi/bundle
mkdir -p "$ROO_HOME"/generated/osgi/conf
mkdir -p "$ROO_HOME"/generated/osgi/cache

cp "$ROO_HOME"/main/bin/* "$ROO_HOME"/generated/osgi/bin
chmod +x "$ROO_HOME"/generated/osgi/bin/*.sh

cp "$ROO_HOME"/main/conf/* "$ROO_HOME"/generated/osgi/conf

# Most Roo bundles are not special and belong in "bundle"
# Copy Addon bundles
# Copy Runtime Bundles

# Copy deps bundles
rsync -av --exclude={'biz.aQute.launcher*','org.apache.felix.dependencymanager*','org.apache.felix.framework*','org.tako.mda.roo*','aQute.libg*','org.eclipse.jgit*','org.tako.wrapped.antlr-ST4*','org.tako.wrapped.json-simple*','org.tako.wrapped.github-spullara-mustache*'} "$ROO_HOME"/deps/tako/jar/ "$ROO_HOME"/generated/osgi/bundle


# Copy tako bundles
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.startlevel/generated/org.tako.mda.roo.startlevel.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.felix/generated/org.tako.mda.roo.felix.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.model/generated/org.tako.mda.roo.model.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.support/generated/org.tako.mda.roo.support.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.metadata/generated/org.tako.mda.roo.metadata.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.shell/generated/org.tako.mda.roo.shell.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.shell.osgi/generated/org.tako.mda.roo.shell.osgi.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.shell.jline/generated/org.tako.mda.roo.shell.jline.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.shell.jline.osgi/generated/org.tako.mda.roo.shell.jline.osgi.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.file.undo/generated/org.tako.mda.roo.file.undo.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.file.monitor/generated/org.tako.mda.roo.file.monitor.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.url.stream/generated/org.tako.mda.roo.url.stream.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.osgi.gogo.commands/generated/org.tako.mda.roo.osgi.gogo.commands.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.classpath/generated/org.tako.mda.roo.classpath.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.classpath.antlrjavaparser/generated/org.tako.mda.roo.classpath.antlrjavaparser.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.converters/generated/org.tako.mda.roo.converters.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.process.manager/generated/org.tako.mda.roo.process.manager.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.project/generated/org.tako.mda.roo.project.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.bnd.templates/generated/org.tako.mda.roo.bnd.templates.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.bnd.templating/generated/org.tako.mda.roo.bnd.templating.jar "$ROO_HOME"/generated/osgi/bundle
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.bnd.templating.gitrepo/generated/org.tako.mda.roo.bnd.templating.gitrepo.jar "$ROO_HOME"/generated/osgi/bundle


# Move the startup-related JAR from the "bundle" directory to the "bin" directory
cp "$ROO_HOME"/deps/tako/jar/org.apache.felix.framework-5.4.0.jar "$ROO_HOME"/generated/osgi/bin
cp "$ROO_HOME_PARENT"/org.tako.mda.roo.bootstrap/generated/org.tako.mda.roo.bootstrap.jar 	"$ROO_HOME"/generated/osgi/bin

# Build a classpath containing our two magical startup JARs (we look for " /" as per ROO-905)
ROO_CP=`echo "$ROO_HOME"/generated/osgi/bin/*.jar | sed 's/ \//:\//g'`
echo ROO_CP: $ROO_CP

# Store file locations in variables to facilitate Cygwin conversion if needed

ROO_OSGI_FRAMEWORK_STORAGE="$ROO_HOME"/generated/osgi/cache
echo "ROO_OSGI_FRAMEWORK_STORAGE: $ROO_OSGI_FRAMEWORK_STORAGE"

ROO_AUTO_DEPLOY_DIRECTORY="$ROO_HOME"/generated/osgi/bundle
echo "ROO_AUTO_DEPLOY_DIRECTORY: $ROO_AUTO_DEPLOY_DIRECTORY"

ROO_CONFIG_FILE_PROPERTIES="$ROO_HOME"/generated/osgi/conf/config.properties
LOG_CONFIG_FILE_PROPERTIES="$ROO_HOME"/generated/osgi/conf/logging.properties
echo "ROO_CONFIG_FILE_PROPERTIES: $ROO_CONFIG_FILE_PROPERTIES"

ROO_DEVELOPMENT_MODE=true
echo "ROO_DEVELOPMENT_MODE : $ROO_DEVELOPMENT_MODE"

cygwin=false;
case "`uname`" in
    CYGWIN*)
        cygwin=true
        ;;
esac

if [ "$cygwin" = "true" ]; then
    export ROO_HOME=`cygpath -wp "$ROO_HOME"`
    export ROO_CP=`cygpath -wp "$ROO_CP"`
    export ROO_OSGI_FRAMEWORK_STORAGE=`cygpath -wp "$ROO_OSGI_FRAMEWORK_STORAGE"`
    export ROO_AUTO_DEPLOY_DIRECTORY=`cygpath -wp "$ROO_AUTO_DEPLOY_DIRECTORY"`
    export ROO_CONFIG_FILE_PROPERTIES=`cygpath -wp "$ROO_CONFIG_FILE_PROPERTIES"`
    # echo "Modified ROO_HOME: $ROO_HOME"
    # echo "Modified ROO_CP: $ROO_CP"
    # echo "Modified ROO_OSGI_FRAMEWORK_STORAGE: $ROO_OSGI_FRAMEWORK_STORAGE"
    # echo "Modified ROO_AUTO_DEPLOY_DIRECTORY: $ROO_AUTO_DEPLOY_DIRECTORY"
    # echo "Modified ROO_CONFIG_FILE_PROPERTIES: $ROO_CONFIG_FILE_PROPERTIES"
fi

# make sure to disable the flash message feature for the default OSX terminal, we recommend to use a ANSI compliant terminal such as iTerm if flash message support is desired
APPLE_TERMINAL=false;
if [ "$TERM_PROGRAM" = "Apple_Terminal" ]; then
	APPLE_TERMINAL=true
fi

# Hop, hop, hop...
#DEBUG=
DEBUG="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y"
PAUSE=
#PAUSE="-Droo.pause=true"
METADATA_TRACE=
#METADATA_TRACE="-Droo.metadata.trace=true"
ANSI="-Droo.console.ansi=true"
LOG="-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog -Dorg.apache.felix.http.log.jul=true -Djava.util.logging.config.file=${LOG_CONFIG_FILE_PROPERTIES}"
echo java $LOG $PAUSE $DEBUG $METADATA_TRACE $ANSI -Dis.apple.terminal=$APPLE_TERMINAL $ROO_OPTS -Dorg.osgi.framework.bootdelegation=org.netbeans.lib.profiler,org.netbeans.lib.profiler.\* -Droo.args="$*" -DdevelopmentMode=$ROO_DEVELOPMENT_MODE -Dorg.osgi.framework.storage="$ROO_OSGI_FRAMEWORK_STORAGE" -Dorg.osgi.framework.system.packages.extra=org.w3c.dom.traversal -Dfelix.auto.deploy.dir="$ROO_AUTO_DEPLOY_DIRECTORY" -Dfelix.config.properties="file:$ROO_CONFIG_FILE_PROPERTIES" -cp "$ROO_CP" org.springframework.roo.bootstrap.Main
	java $LOG $PAUSE $DEBUG $METADATA_TRACE $ANSI -Dis.apple.terminal=$APPLE_TERMINAL $ROO_OPTS -Dorg.osgi.framework.bootdelegation=org.netbeans.lib.profiler,org.netbeans.lib.profiler.\* -Droo.args="$*" -DdevelopmentMode=$ROO_DEVELOPMENT_MODE -Dorg.osgi.framework.storage="$ROO_OSGI_FRAMEWORK_STORAGE" -Dorg.osgi.framework.system.packages.extra=org.w3c.dom.traversal -Dfelix.auto.deploy.dir="$ROO_AUTO_DEPLOY_DIRECTORY" -Dfelix.config.properties="file:$ROO_CONFIG_FILE_PROPERTIES" -cp "$ROO_CP" org.springframework.roo.bootstrap.Main
EXITED=$?
echo Roo exited with code $EXITED
